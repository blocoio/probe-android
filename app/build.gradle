apply plugin: 'com.android.application'
apply from: 'jacoco.gradle'

android {
	compileSdkVersion 30
	buildToolsVersion "30.0.3"
	ndkVersion '22.0.7026061'

	defaultConfig {
		applicationId 'org.openobservatory.ooniprobe'
		minSdkVersion 21
		targetSdkVersion 30
		versionName '3.0.0-beta.1'
		versionCode 76
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		buildConfigField 'String', 'OONI_API_BASE_URL', '"https://api.ooni.io/"'
		buildConfigField 'String', 'NOTIFICATION_SERVER', '"https://countly.ooni.io"'
		resValue "string", "APP_NAME", "OONI Probe"
		buildConfigField 'String', 'SOFTWARE_NAME', 'BASE_SOFTWARE_NAME+IS_DEBUG'
		buildConfigField 'String', 'COUNTLY_KEY', '"146836f41172f9e3287cab6f2cc347de3f5ddf3b"'
	}

	buildTypes {
		debug {
			testCoverageEnabled true
			buildConfigField 'String', 'IS_DEBUG', '"-debug"'
			buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
		}

		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			buildConfigField 'String', 'IS_DEBUG', '""'
		}
	}

	testOptions {
		unitTests {
			includeAndroidResources = true
		}
	}

	flavorDimensions 'testing', 'license'
	productFlavors {
		stable {
			dimension 'testing'
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android"'
		}
		dev {
			dimension 'testing'
			applicationIdSuffix '.dev'
			versionName versionNameDate()
			versionCode versionCodeDate()
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-dev"'
			resValue "string", "APP_NAME", "OONI Dev"
			buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
		}
		experimental {
			dimension 'testing'
			applicationIdSuffix '.experimental'
			versionName versionNameDate()
			versionCode versionCodeDate()
			buildConfigField 'String', 'BASE_SOFTWARE_NAME', '"ooniprobe-android-experimental"'
			resValue "string", "APP_NAME", "OONI Exp"
			buildConfigField 'String', 'COUNTLY_KEY', '"e6c2cfe53e85951d50567467cef3f9fa2eab32c3"'
		}
		fdroid {
			dimension 'license'
		}
		full {
			dimension 'license'
		}
	}
	variantFilter { variant ->
		def names = variant.flavors*.name
		if (names.contains("fdroid") && (names.contains("experimental") || names.contains("dev"))) {
			setIgnore(true)
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

dependencies {
	implementation project(path: ':engine')

// AndroidX
	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
	implementation 'androidx.lifecycle:lifecycle-process:2.3.0'
	implementation 'androidx.preference:preference:1.1.1'
	implementation 'com.google.android.material:material:1.3.0'
	implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

// Third-party
	annotationProcessor 'com.github.Raizlabs.DBFlow:dbflow-processor:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow-core:4.2.4'
	implementation 'com.github.Raizlabs.DBFlow:dbflow:4.2.4'

	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'


	implementation 'com.jakewharton:butterknife:10.2.3'
	annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'

	implementation 'com.github.xanscale.LocalhostToolkit:app:19.05.01'
	implementation 'com.airbnb.android:lottie:3.0.7'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'ru.noties:markwon:2.0.1'
	implementation 'commons-io:commons-io:2.6'
	//arcview to fragment_dashboard
	implementation 'com.github.florent37:shapeofview:1.3.2'

// Flavor
	fullImplementation platform('com.google.firebase:firebase-bom:26.3.0')
	fullImplementation 'com.google.firebase:firebase-messaging'
	fullImplementation 'ly.count.android:sdk:20.11.1'
	fullImplementation 'io.sentry:sentry-android:4.0.0'

// Dependency Injection
	implementation 'com.google.dagger:dagger:2.34.1'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.34.1'

// Testing
	// Unit Testing
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'androidx.test:core:1.3.0'
	testImplementation 'androidx.test:runner:1.3.0'
	testImplementation 'androidx.test:rules:1.3.0'
	testImplementation 'org.mockito:mockito-core:3.9.0'
	testImplementation 'org.robolectric:robolectric:4.5.1'

	// Instrumentation Testing
	testImplementation 'org.mockito:mockito-core:3.9.0'
	testImplementation 'org.robolectric:robolectric:4.4'
	testImplementation 'junit:junit:4.13.2'
	androidTestImplementation 'tools.fastlane:screengrab:2.0.0'
	androidTestImplementation 'androidx.test:runner:1.3.0'
	androidTestImplementation 'androidx.test:rules:1.3.0'
	androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	androidTestImplementation('androidx.test.espresso:espresso-contrib:3.3.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
	androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0') {
		exclude group: 'com.android.support', module: 'appcompat'
		exclude group: 'com.android.support', module: 'support-v4'
		exclude module: 'recyclerview-v7'
	}
}

static def versionCodeDate() {
	return new Date().format("yyyyMMdd").toInteger()
}

static def versionNameDate() {
	return new Date().format("yyyy.MM.dd-HH")
}

if (!getGradle().getStartParameter().getTaskRequests()
		.toString().contains("Fdroid")){
	apply plugin: 'com.google.gms.google-services'
}
